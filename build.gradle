/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    id 'eclipse'
    id "com.github.spotbugs" version "1.6.9"
    id 'pmd'

    // Apply the application plugin to add support for building an application
    id 'application'

    id 'jacoco'

}

jacoco {
    toolVersion = "0.8.3"

    //report結果の出力場所
    reportsDir = file("$buildDir/customJacocoReportDir")
}


jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true

        //これを書かなかったらbuildDir/customJacocoDirに結果が出力される
        html.destination file("${buildDir}/jacocoHtml")

        //これを書いたらbuildDir直下にxmlreport.xmlという名前で出力される
        //xml.destination file("${buildDir}/xmlreport.xml")
    }
}

pmd {
    ignoreFailures = true
}

spotbugs {
    ignoreFailures = true
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports.xml.enabled = false
    reports.html.enabled = true
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:27.0.1-jre'
    implementation 'junit:junit:4.12'

    implementation 'org.jacoco:org.jacoco.core:0.8.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.2.0'
    testImplementation "org.mockito:mockito-core:2.+"

    compile group: 'com.github.javaparser', name: 'javaparser-symbol-solver-core', version: '3.5.15'
    compile group: 'com.github.spotbugs', name: 'spotbugs', version: '3.1.12'

}

// Define the main class for the application
mainClassName = 'jp.posl.jprophet.JProphetMain'

run {
    if (project.hasProperty('args')) {    // "args" というプロパティが渡されていたら
        args project.args.split('\\s+')   // 空白文字で split して、 run タスクの args オプションにセットする
    }
}

// task javadocPrivate(type: Javadoc){
//     source = sourceSets.main.allJava
//     options.showFromPrivate()
// }
